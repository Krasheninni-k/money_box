import calendar, time, os, logging, schedule, threading
from datetime import datetime, timedelta
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (CommandHandler, Updater, MessageHandler, Filters,
                           CallbackQueryHandler, ConversationHandler)
from dotenv import load_dotenv

from money_box.wsgi import * #–≠—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –∏–∑ –î–∂–∞–Ω–≥–æ
from django.db.models import Sum
from app.models import Payments, Category

load_dotenv()

token = os.getenv('TOKEN')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)

CONFIRM, EDIT, EDIT_DATE, EDIT_AMOUNT, EDIT_DESCRIPTION, EDIT_CATEGORY, SEE_DATE = range(7)
TARGET = 200000
user_data = {}

# –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ. –ö–æ–º–∞–Ω–¥–∞ "/start"
def wake_up(update, context):
    chat = update.effective_chat
    name = update.message.chat.first_name
    buttons = ReplyKeyboardMarkup(
        [['/costs', '/result'], ['/categories', '/costsdate']], resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–ü—Ä–∏–≤–µ—Ç, {}. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü. –ù–∞–ø–∏—à–∏ –Ω–∏–∂–µ, —á—Ç–æ –∏ –ø–æ—á–µ–º –∫—É–ø–ª–µ–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫: "582 —Ö–ª–µ–±–Ω–∏–∫".').format(name),
        reply_markup=buttons
    )
    schedule.every().day.at('10:00').do(send_daily_message, update, context)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—ã.
def send_daily_message(update, context):
    chat = update.effective_chat
    message = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å. –î–æ–±–∞–≤—å—Ç–µ, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.'
    context.bot.send_message(chat_id=chat.id, text=message)
    get_costs_date(update, context, date=None)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Ä–∞—Å—Ö–æ–¥–æ–º "500 –•–ª–µ–±–Ω–∏–∫"
def add_cost(update, context):
    chat = update.effective_chat
    user_id = update.effective_user.id
    text = update.message.text
    amount, description = text.split()
    current_date = datetime.now().strftime("%d.%m.%Y")
    category = Payments.objects.filter(description__iregex=description)
    category = category.first().category if category else Category.objects.get(id=1)
    user_data[user_id] = {'date': current_date,
                          'amount': int(amount),
                          'description': description,
                          'category': category}
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm')],
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='edit')]])
    context.bot.send_message(
        chat_id=chat.id,
        text=('–î–∞—Ç–∞ - {}\n–°—É–º–º–∞ - {}\n–û–ø–∏—Å–∞–Ω–∏–µ - {}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {}').format(current_date, amount, description, category.title),
        reply_markup=buttons)
    return CONFIRM


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–∞.
def confirm(update, context):
    chat = update.effective_chat
    user_id = update.effective_user.id
    date_str = user_data[user_id]['date']
    date_format = '%d.%m.%Y'
    date = datetime.strptime(date_str, date_format)
    payment = Payments.objects.create(
        date=date,
        amount=user_data[user_id]['amount'],
        description=user_data[user_id]['description'],
        category=user_data[user_id]['category']
        )
    payment.save()
    update.callback_query.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    del user_data[user_id]
    costs, reserve = calculate_costs()
    if reserve > 0:
        context.bot.send_message(
            chat_id=chat.id,
            text=('‚úÖ‚úÖ‚úÖ–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {} —Ä—É–±.\n–†–µ–∑–µ—Ä–≤ {} —Ä—É–±.').format(costs, reserve)
            )
    else:
        context.bot.send_message(
            chat_id=chat.id,
            text=('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {} —Ä—É–±.\n–ü–µ—Ä–µ–ª–∏–º–∏—Ç {} —Ä—É–±.').format(costs, reserve)
            )
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –µ–≥–æ –≤–≤–æ–¥–∞.
def edit(update, context):
    chat = update.effective_chat
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton('–î–∞—Ç—É', callback_data='edit_date'),
         InlineKeyboardButton('–°—É–º–º—É', callback_data='edit_amount')],
         [InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ', callback_data='edit_description'),
          InlineKeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='edit_category')]
          ])
    context.bot.send_message(
        chat_id=chat.id,
        text=('–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:'),
        reply_markup=buttons
    )
    return EDIT


def edit_date(update, context):
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "23.10" –∏–ª–∏ "23.10.2023"')
        )
    return EDIT_DATE


def edit_amount(update, context):
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ "500"')
        )
    return EDIT_AMOUNT


def edit_description(update, context):
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
        )
    return EDIT_DESCRIPTION


def edit_category(update, context):
    chat = update.effective_chat
    categories = Category.objects.all()
    categories = [category.title for category in categories]
    buttons = [InlineKeyboardButton(category, callback_data=f"category_{i+1}") for i, category in enumerate(categories)]
    button_rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    reply_markup = InlineKeyboardMarkup(button_rows)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:'),
        reply_markup=reply_markup)
    return EDIT_CATEGORY


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è (–¥–∞—Ç—ã, —Å—É–º–º—ã, –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
def edit_value_save(update, context, value_type, new_value):
    chat = update.effective_chat
    user_id = update.effective_user.id
    user_data[user_id][value_type] = new_value
    if value_type == 'description':
        category = Payments.objects.filter(description__iregex=user_data[user_id]['description'])
        user_data[user_id]['category'] = category.first().category if category else Category.objects.first()
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm')],
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='edit')]
    ])
    context.bot.send_message(
        chat_id=chat.id,
        text=('–î–∞—Ç–∞ - {}\n–°—É–º–º–∞ - {}\n–û–ø–∏—Å–∞–Ω–∏–µ - {}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {}').format(
            user_data[user_id]['date'],
            user_data[user_id]['amount'],
            user_data[user_id]['description'],
            user_data[user_id]['category'].title),
        reply_markup=buttons)
    return CONFIRM


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã(–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã)
def edit_date_save(update, context):
    text = update.message.text
    if len(text) < 10:
        current_year = str(datetime.now().year)
        text += '.' + current_year
    edit_value_save(update, context, 'date', text)
    return CONFIRM


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã)
def edit_amount_save(update, context):
    text = update.message.text
    edit_value_save(update, context, 'amount', int(text))
    return CONFIRM


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è)
def edit_description_save(update, context):
    text = update.message.text
    edit_value_save(update, context, 'description', text)
    return CONFIRM


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
def edit_category_save(update, context):
    chat = update.effective_chat
    query = update.callback_query
    user_id = update.effective_user.id
    data = query.data
    category_index = int(data.split("_")[1]) - 1
    selected_category = Category.objects.all()[category_index]
    user_data[user_id]['category'] = selected_category
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm')],
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='edit')]
    ])
    context.bot.send_message(
        chat_id=chat.id,
        text=('–î–∞—Ç–∞ - {}\n–°—É–º–º–∞ - {}\n–û–ø–∏—Å–∞–Ω–∏–µ - {}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {}').format(
            user_data[user_id]['date'],
            user_data[user_id]['amount'],
            user_data[user_id]['description'],
            user_data[user_id]['category'].title),
        reply_markup=buttons)
    return CONFIRM


# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /get_costs
def get_costs(update, context):
    chat = update.effective_chat
    current_date = datetime.now()
    start_date = datetime(current_date.year, current_date.month, 1)
    result = []
    queryset = Payments.objects.filter(date__gte=start_date, date__lte=current_date)
    for payment in queryset:
        result.append(f'üìç{payment.date.strftime("%d.%m")} - {int(payment.amount)} - {payment.description} - {payment.category.title}')
    message_text = '\n'.join(result)
    context.bot.send_message(
        chat_id=chat.id,
        text=message_text)


def know_date(update, context):
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "23.10" –∏–ª–∏ "23.10.2023"')
        )
    return SEE_DATE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã(–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–∞—Ç—É)
def check_date(update, context):
    text = update.message.text
    if len(text) < 10:
        current_year = str(datetime.now().year)
        text += '.' + current_year
    get_costs_date(update, context, text)
    return ConversationHandler.END


# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å (–±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
def get_costs_date(update, context, date):
    chat = update.effective_chat
    if not date:
        target_date = datetime.now().date() - timedelta(days=1)
    else:
        target_date = date
    date_format = '%d.%m.%Y'
    target_date = datetime.strptime(target_date, date_format).date()
    result = []
    queryset = Payments.objects.filter(date=target_date)
    for payment in queryset:
        result.append(f'üìç{payment.date.strftime("%d.%m")} - {int(payment.amount)} - {payment.description} - {payment.category.title}')
    message_text = '\n'.join(result)
    context.bot.send_message(
        chat_id=chat.id,
        text=message_text)


# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ –∫–æ–º–∞–Ω–¥–µ /categories
def get_categories(update, context):
    chat = update.effective_chat
    current_date = datetime.now()
    start_date = datetime(current_date.year, current_date.month, 1)
    categories = Category.objects.all()
    result = []
    queryset = Payments.objects.filter(date__gte=start_date, date__lte=current_date)
    costs = queryset.aggregate(sum=Sum('amount'))
    for category in categories:
        category_costs =  queryset.filter(category=category).aggregate(sum=Sum('amount'))
        costs_sum = category_costs['sum'] if category_costs['sum'] is not None else 0
        result.append(f'üìç{category.title} - {costs_sum}')
    message_text = '\n'.join(result)
    context.bot.send_message(
        chat_id=chat.id,
        text=('–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∏—Ç–æ–≥–æ - {}\n{}').format(costs['sum'], message_text))


# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /result
def get_result(update, context):
    chat = update.effective_chat
    costs, reserve = calculate_costs()
    if reserve > 0:
        context.bot.send_message(
            chat_id=chat.id,
            text=('–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {} —Ä—É–±.\n‚úÖ‚úÖ‚úÖ–†–µ–∑–µ—Ä–≤ {} —Ä—É–±.').format(costs, reserve)
            )
    else:
        context.bot.send_message(
            chat_id=chat.id,
            text=('–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {} —Ä—É–±.\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è–ü–µ—Ä–µ–ª–∏–º–∏—Ç {} —Ä—É–±.').format(costs, reserve)
            )


# –†–∞—Å—á–µ—Ç —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü –∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞/–ø–µ—Ä–µ–ª–∏–º–∏—Ç–∞
def calculate_costs():
    current_date = datetime.now()
    start_date = datetime(current_date.year, current_date.month, 1)
    costs = Payments.objects.filter(date__gte=start_date, date__lte=current_date).aggregate(
        sum=Sum('amount'))
    costs_sum = costs['sum']

    _, last_day = calendar.monthrange(current_date.year, current_date.month)
    end_date = datetime(current_date.year, current_date.month, last_day)
    days_in_month = (end_date - start_date + timedelta(days=1)).days
    days_passed = (current_date - start_date + timedelta(days=1)).days
    reserve = int((TARGET * days_passed / days_in_month - float(costs_sum)))
    return costs_sum, reserve


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def schedule_loop():
    while True:
        schedule.run_pending()
        time.sleep(1)


def main():
    updater = Updater(token=token)
    updater.dispatcher.add_handler(CommandHandler('start', wake_up))
    updater.dispatcher.add_handler(CommandHandler('categories', get_categories))
    updater.dispatcher.add_handler(CommandHandler('costs', get_costs))
    updater.dispatcher.add_handler(CommandHandler('result', get_result))

    conversation_handler_1 = ConversationHandler(
    entry_points=[(CommandHandler('costsdate', know_date))],
    states={
        SEE_DATE: [MessageHandler(Filters.text, check_date)]},
    fallbacks=[],
    )
    updater.dispatcher.add_handler(conversation_handler_1)


    conversation_handler_2 = ConversationHandler(
        entry_points=[(MessageHandler(Filters.regex(r'^\d+\s[A-Za-z0-9]+$'), add_cost))],
        states={
            CONFIRM: [CallbackQueryHandler(confirm, pattern='confirm'),
                      CallbackQueryHandler(edit, pattern='edit')],
            EDIT: [CallbackQueryHandler(edit_date, pattern='edit_date'),
                   CallbackQueryHandler(edit_amount, pattern='edit_amount'),
                   CallbackQueryHandler(edit_description, pattern='edit_description'),
                   CallbackQueryHandler(edit_category, pattern='edit_category')],
            EDIT_DATE: [MessageHandler(Filters.text, edit_date_save)],
            EDIT_AMOUNT: [MessageHandler(Filters.text, edit_amount_save)],
            EDIT_DESCRIPTION: [MessageHandler(Filters.text, edit_description_save)],
            EDIT_CATEGORY: [CallbackQueryHandler(edit_category_save)]
        },
        fallbacks=[],
    )
    updater.dispatcher.add_handler(conversation_handler_2)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    schedule_thread = threading.Thread(target=schedule_loop)
    schedule_thread.start()
    main()
